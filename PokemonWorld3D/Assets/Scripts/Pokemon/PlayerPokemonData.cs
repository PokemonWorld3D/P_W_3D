using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System;
using System.Runtime.Serialization;
using System.Reflection;
using System.Xml.Serialization;

[System.Serializable]
public class PlayerPokemonData : ISerializable {

	public bool isAlive;
	public float timeOfDeath;
	public bool isCaptured;
	public int number;
	public string pokemonName;
	public string nickName;
	public string description;
	public bool isFromTrade;
	public int level;
	public int evolveLevel;
	public BasePokemon.TypesList type01;
	public BasePokemon.TypesList type02;
	public BasePokemon.SexesList sex;
	public BasePokemon.NaturesList nature;
	public string ability01;
	public string ability02;
	public int baseHP;
	public int baseATK;
	public int baseDEF;
	public int baseSPATK;
	public int baseSPDEF;
	public int baseSPD;
	public int maxHP;
	public int curMaxHP;
	public int maxATK;
	public int maxDEF;
	public int maxSPATK;
	public int maxSPDEF;
	public int maxSPD;
	public int curHP;
	public int curATK;
	public int curDEF;
	public int curSPATK;
	public int curSPDEF;
	public int curSPD;
	public int atkStage;
	public int defStage;
	public int spatkStage;
	public int spdefStage;
	public int spdStage;
	public float evasion;
	public int evasionStage;
	public float accuracy;
	public int accuracyStage;
	public int hpEV;
	public int atkEV;
	public int defEV;
	public int spatkEV;
	public int spdefEV;
	public int spdEV;
	public int hpIV;
	public int atkIV;
	public int defIV;
	public int spatkIV;
	public int spdefIV;
	public int spdIV;
	public int baseEXPYield;
	public BasePokemon.LevelingRatesList levelingRate;
	public int lastRequiredXP;
	public int currentXP;
	public int nextRequiredXP;
	public int hpEVYield;
	public int atkEVYield;
	public int defEVYield;
	public int spatkEVYield;
	public int spdefEVYield;
	public int spdEVYield;
	public int baseFriendship;
	public int catchRate;
	public BasePokemon.NonVolatileStatusConditionList statusCondition;
	public int badlyPoisonedTurnCounter;
	public int sleepTurns;
	public bool confusion;
	public int confusionTurns;
	public bool curse;
	public bool embargo;
	public int embargoTurns;
	public bool encore;
	public int encoreTurns;
	public bool flinch;
	public bool healBlock;
	public int healBlockTurns;
	public bool identification;
	public bool infatuation;
	public bool nightmare;
	public bool partiallyTrapped;
	public int partiallyTrappedTurns;
	public bool perishSong;
	public int perishSongTurnCountDown;
	public bool seeding;
	public bool taunt;
	public int tauntTurns;
	public bool telekineticLevitation;
	public int telekineticLevitationTurns;
	public bool torment;
	public bool trapped;
	public bool aquaRing;
	public bool bracing;
	public bool centerOfAttention;
	public bool defenseCurl;
	public bool glowing;
	public bool rooting;
	public bool magicCoat;
	public bool magneticLevitation;
	public int magneticLevitationTurns;
	public bool minimize;
	public bool protection;
	public bool recharging;
	public bool semiInvulnerable;
	public bool substitute;
	public int substituteHP;
	public bool takingAim;
	public bool takingInSunlight;
	public bool withdrawing;
	public bool whippingUpAWhirlwind;
	[XmlArray]
	public List<Move> movesToLearn = new List<Move>();
	[XmlArray]
	public List<Move> pokemonsMoves = new List<Move>();
	public Move lastMoveUsed;
	public Item equippedItem;
	public bool isInBattle;
	public int origin;
	public int genderRatio;
	public bool isShiny;

	public PlayerPokemonData(){

	}
	
	public PlayerPokemonData(bool newIsAlive, float newTimeOfDeath, bool newIsCaptured, int newNumber, string newName, string newNickName, string newDescription,
	                         bool newIsFromTrade, int newLevel, int newEvolveLevel, BasePokemon.TypesList newType1, BasePokemon.TypesList newType2,
	                         BasePokemon.SexesList newSex, BasePokemon.NaturesList newNature, string newAbility1, string newAbility2, int newBaseHP, int newBaseATK,
	                         int newBaseDEF, int newBaseSPATK, int newBaseSPDEF, int newBaseSPD, int newMaxHP, int newCurMaxHP, int newMaxATK, int newMaxDEF,
	                         int newMaxSPATK, int newMaxSPDEF, int newMaxSPD, int newCurHP, int newCurATK, int newATKStage, int newCurDEF, int newDEFStage,
	                         int newCurSPATK, int newSPATKStage, int newCurSPDEF, int newSPDEFStage, int newCurSPD, int newSPDStage, float newEvasion,
	                         int newEvasionStage, float newAccuracy, int newAccuracyStage, int newHpEV, int newAtkEV, int newDefEV, int newSpatkEV, int newSpdefEV,
	                         int newSpdEV, int newHpIV, int newAtkIV, int newDefIV, int newSpatkIV, int newSpdefIV, int newSpdIV, int newBaseEXPYield,
	                         BasePokemon.LevelingRatesList newLevelingRate, int newLastRequiredXP, int newCurrentXP, int newNextRequiredXP, int newHpEVYield,
	                         int newAtkEVYield, int newDefEVYield, int newSpatkEVYield, int newSpdefEVYield, int newSpdEVYield, int newBaseFriendship,
	                         int newCatchRate, BasePokemon.NonVolatileStatusConditionList newStatusCondition, int newBadlyPoisonedTurnCounter, int newSleepTurns,
	                         bool newConfusion, int newConfusionTurns, bool newCurse, bool newEmbargo, int newEmbargoTurns, bool newEncore, int newEncoreTurns,
	                         bool newFlinch, bool newHealBlock, int newHealBlockTurns, bool newIdentification, bool newInfatuation, bool newNightmare,
	                         bool newPartiallyTrapped, int newPartiallyTrappedTurns, bool newPerishSong, int newPerishSongTurnCountDown, bool newSeeding,
	                         bool newTaunt, int newTauntTurns, bool newTelekineticLevitation, int newTelekineticLevitationTurns, bool newTorment, bool newTrapped,
	                         bool newAquaRing, bool newBracing, bool newCenterOfAttention, bool newDefenseCurl, bool newGlowing, bool newRooting, bool newMagicCoat,
	                         bool newMagneticLevitation, int newMagneticLevitationTurns, bool newMinimize, bool newProtection, bool newRecharging,
	                         bool newSemiInvulnerable, bool newSubstitute, int newSubstituteHP, bool newTakingAim, bool newTakingInSunlight, bool newWithdrawing,
	                         bool newWhippingUpAWhirlwind, List<Move> newMovesToLearn, List<Move> newPokemonsMoves, Move newLastMoveUsed, Item newEquippedItem,
	                         bool newIsInBattle, int newOrigin, int newGenderRatio, bool newIsShiny){




		isAlive = newIsAlive;
		timeOfDeath = newTimeOfDeath;
		isCaptured = newIsCaptured;
		number = newNumber;
		pokemonName = newName;
		nickName = newNickName;
		description = newDescription;
		isFromTrade = newIsFromTrade;
		level = newLevel;
		evolveLevel = newEvolveLevel;
		type01 = newType1;
		type02 = newType2;
		sex = newSex;
		nature = newNature;
		ability01 = newAbility1;
		ability02 = newAbility2;
		baseHP = newBaseHP;
		baseATK = newBaseATK;
		baseDEF = newBaseDEF;
		baseSPATK = newBaseSPATK;
		baseSPDEF = newBaseSPDEF;
		baseSPD = newBaseSPD;
		maxHP = newMaxHP;
		curMaxHP = newCurMaxHP;
		maxATK = newMaxATK;
		maxDEF = newMaxDEF;
		maxSPATK = newMaxSPATK;
		maxSPDEF = newMaxSPDEF;
		maxSPD = newMaxSPD;
		curHP = newCurHP;
		curATK = newCurATK;
		atkStage = newATKStage;
		curDEF = newCurDEF;
		defStage = newDEFStage;
		curSPATK = newCurSPATK;
		spatkStage = newSPATKStage;
		curSPDEF = newCurSPDEF;
		spdefStage = newSPDEFStage;
		curSPD = newCurSPD;
		spdStage = newSPDStage;
		evasion = newEvasion;
		evasionStage = newEvasionStage;
		accuracy = newAccuracy;
		accuracyStage = newAccuracyStage;
		hpEV = newHpEV;
		atkEV = newAtkEV;
		defEV = newDefEV;
		spatkEV = newSpatkEV;
		spdefEV = newSpdefEV;
		spdEV = newSpdEV;
		hpIV = newHpIV;
		atkIV = newAtkIV;
		defIV = newDefIV;
		spatkIV = newSpatkIV;
		spdefIV = newSpdefIV;
		spdIV = newSpdIV;
		baseEXPYield = newBaseEXPYield;
		levelingRate = newLevelingRate;
		lastRequiredXP = newLastRequiredXP;
		currentXP = newCurrentXP;
		nextRequiredXP = newNextRequiredXP;
		hpEVYield = newHpEVYield;
		atkEVYield = newAtkEVYield;
		defEVYield = newDefEVYield;
		spatkEVYield = newSpatkEVYield;
		spdefEVYield = newSpdefEVYield;
		spdEVYield = newSpdEVYield;
		baseFriendship = newBaseFriendship;
		catchRate = newCatchRate;
		statusCondition = newStatusCondition;
		badlyPoisonedTurnCounter = newBadlyPoisonedTurnCounter;
		sleepTurns = newSleepTurns;
		confusion = newConfusion;
		confusionTurns = newConfusionTurns;
		curse = newCurse;
		embargo = newEmbargo;
		embargoTurns = newEmbargoTurns;
		encore = newEncore;
		encoreTurns = newEncoreTurns;
		flinch = newFlinch;
		healBlock = newHealBlock;
		healBlockTurns = newHealBlockTurns;
		identification = newIdentification;
		infatuation = newInfatuation;
		nightmare = newNightmare;
		partiallyTrapped = newPartiallyTrapped;
		partiallyTrappedTurns = newPartiallyTrappedTurns;
		perishSong = newPerishSong;
		perishSongTurnCountDown = newPerishSongTurnCountDown;
		seeding = newSeeding;
		taunt = newTaunt;
		tauntTurns = newTauntTurns;
		telekineticLevitation = newTelekineticLevitation;
		telekineticLevitationTurns = newTelekineticLevitationTurns;
		torment = newTorment;
		trapped = newTrapped;
		aquaRing = newAquaRing;
		bracing = newBracing;
		centerOfAttention = newCenterOfAttention;
		defenseCurl = newDefenseCurl;
		glowing = newGlowing;
		rooting = newRooting;
		magicCoat = newMagicCoat;
		magneticLevitation = newMagneticLevitation;
		magneticLevitationTurns = newMagneticLevitationTurns;
		minimize = newMinimize;
		protection = newProtection;
		recharging = newRecharging;
		semiInvulnerable = newSemiInvulnerable;
		substitute = newSubstitute;
		substituteHP = newSubstituteHP;
		takingAim = newTakingAim;
		takingInSunlight = newTakingInSunlight;
		withdrawing = newWithdrawing;
		whippingUpAWhirlwind = newWhippingUpAWhirlwind;
		movesToLearn = newMovesToLearn;
		pokemonsMoves = newPokemonsMoves;
		lastMoveUsed = newLastMoveUsed;
		equippedItem = newEquippedItem;
		isInBattle = newIsInBattle;
		origin = newOrigin;
		genderRatio = newGenderRatio;
		isShiny = newIsShiny;
	}
	

	protected PlayerPokemonData(SerializationInfo info, StreamingContext context){
		isAlive = info.GetBoolean("isAlive");
		timeOfDeath = (float)info.GetInt32("timeOfDeath");
		isCaptured = info.GetBoolean("isCapted");
		number = info.GetInt32("number");
		pokemonName = info.GetString("pokemonName");
		nickName = info.GetString("nickName");
		description = info.GetString("description");
		isFromTrade = info.GetBoolean("isFromTrade");
		level = info.GetInt32("level");
		evolveLevel = info.GetInt32("evolveLevel");
		type01 = (BasePokemon.TypesList)info.GetByte("type01");
		type02 = (BasePokemon.TypesList)info.GetByte("type02");
		sex = (BasePokemon.SexesList)info.GetByte("sex");
		nature = (BasePokemon.NaturesList)info.GetByte("nature");
		ability01 = info.GetString("ability01");
		ability02 = info.GetString("ability02");
		baseHP = info.GetInt32("baseHP");
		baseATK = info.GetInt32("baseATK");
		baseDEF = info.GetInt32("baseDEF");
		baseSPATK = info.GetInt32("baseSPATK");
		baseSPDEF = info.GetInt32("baseSPDEF");
		baseSPD = info.GetInt32("baseSPD");
		maxHP = info.GetInt32("maxHP");
		curMaxHP = info.GetInt32("curMaxHP");
		maxATK = info.GetInt32("maxATK");
		maxDEF = info.GetInt32("maxDEF");
		maxSPATK = info.GetInt32("maxSPATK");
		maxSPDEF = info.GetInt32("maxSPDEF");
		maxSPD = info.GetInt32("maxSPD");
		curHP = info.GetInt32("curHP");
		curATK = info.GetInt32("curATK");
		atkStage = info.GetInt32("atkStage");
		curDEF = info.GetInt32("curDEF");
		defStage = info.GetInt32("defStage");
		curSPATK = info.GetInt32("curSPATK");
		spatkStage = info.GetInt32("spatkStage");
		curSPDEF = info.GetInt32("curSPDEF");
		spdefStage = info.GetInt32("spdefStage");
		curSPD = info.GetInt32("curSPD");
		spdStage = info.GetInt32("spdStage");
		evasion = (float)info.GetInt32("evasion");
		evasionStage = info.GetInt32("evasionStage");
		accuracy = (float)info.GetInt32("accuracy");
		accuracyStage = info.GetInt32("accuracyStage");
		hpEV = info.GetInt32("hpEV");
		atkEV = info.GetInt32("atkEV");
		defEV = info.GetInt32("defEV");
		spatkEV = info.GetInt32("spatkEV");
		spdefEV = info.GetInt32("spdefEV");
		spdEV = info.GetInt32("spdEV");
		hpIV = info.GetInt32("hpIV");
		atkIV = info.GetInt32("atkIV");
		defIV = info.GetInt32("defIV");
		spatkIV = info.GetInt32("spatkIV");
		spdefIV = info.GetInt32("spdefIV");
		spdIV = info.GetInt32("spdIV");
		baseEXPYield = info.GetInt32("baseEXPYield");
		levelingRate = (BasePokemon.LevelingRatesList)info.GetByte("levelingRate");
		lastRequiredXP = info.GetInt32("lastRequiredXP");
		currentXP = info.GetInt32("currentXP");
		nextRequiredXP = info.GetInt32("nextRequiredXP");
		hpEVYield = info.GetInt32("hpEVYield");
		atkEVYield = info.GetInt32("atkEVYield");
		defEVYield = info.GetInt32("defEVYield");
		spatkEVYield = info.GetInt32("spatkEVYield");
		spdefEVYield = info.GetInt32("spdefEVYield");
		spdEVYield = info.GetInt32("spdEVYield");
		baseFriendship = info.GetInt32("baseFriendship");
		catchRate = info.GetInt32("catchRate");
		statusCondition = (BasePokemon.NonVolatileStatusConditionList)info.GetByte("statusCondition");
		badlyPoisonedTurnCounter = info.GetInt32("badlyPoisonedTurnCounter");
		sleepTurns = info.GetInt32("sleepTurns");
		confusion = info.GetBoolean("confusion");
		confusionTurns = info.GetInt32("confusionTurns");
		curse = info.GetBoolean("curse");
		embargo = info.GetBoolean("embargo");
		embargoTurns = info.GetInt32("embargoTurns");
		encore = info.GetBoolean("encore");
		encoreTurns = info.GetInt32("encoreTurns");
		flinch = info.GetBoolean("flinch");
		healBlock = info.GetBoolean("healBlock");
		healBlockTurns = info.GetInt32("healBlockTurns");
		identification = info.GetBoolean("identification");
		infatuation = info.GetBoolean("infatuation");
		nightmare = info.GetBoolean("nightmare");
		partiallyTrapped = info.GetBoolean("partiallyTrapped");
		partiallyTrappedTurns = info.GetInt32("partiallyTrappedTurns");
		perishSong = info.GetBoolean("perishSong");
		perishSongTurnCountDown = info.GetInt32("perishSongTurnCountDown");
		seeding = info.GetBoolean("seeding");
		taunt = info.GetBoolean("taunt");
		tauntTurns = info.GetInt32("tauntTurns");
		telekineticLevitation = info.GetBoolean("telekineticLevitation");
		telekineticLevitationTurns = info.GetInt32("telekineticLevitationTurns");
		torment = info.GetBoolean("torment");
		trapped = info.GetBoolean("trapped");
		aquaRing = info.GetBoolean("aquaRing");
		bracing = info.GetBoolean("bracing");
		centerOfAttention = info.GetBoolean("centerOfAttention");
		defenseCurl = info.GetBoolean("defenseCurl");
		glowing = info.GetBoolean("glowing");
		rooting = info.GetBoolean("rooting");
		magicCoat = info.GetBoolean("magicCoat");
		magneticLevitation = info.GetBoolean("magneticLevitation");
		magneticLevitationTurns = info.GetInt32("magneticLevitationTurns");
		minimize = info.GetBoolean("minimize");
		protection = info.GetBoolean("protection");
		recharging = info.GetBoolean("recharging");
		semiInvulnerable = info.GetBoolean("semiInvulnerable");
		substitute = info.GetBoolean("substitute");
		substituteHP = info.GetInt32("substituteHP");
		takingAim = info.GetBoolean("takingAim");
		takingInSunlight = info.GetBoolean("takingInSunlight");
		withdrawing = info.GetBoolean("withdrawing");
		whippingUpAWhirlwind = info.GetBoolean("whippingUpAWhirlwind");
//		movesToLearn = info.
//		pokemonsMoves = info.
//		equippedItem = info.GetValue("baseItem", BaseItem);
//		lastMoveUsed = info.
		isInBattle = info.GetBoolean("isInBattle");
		origin = info.GetInt32("origin");
		genderRatio = info.GetInt32("genderRatio");
		isShiny = info.GetBoolean("isShiny");
	}
	
	public void GetObjectData(SerializationInfo info, StreamingContext context){
		info.AddValue("isAlive", isAlive);
		info.AddValue("timeOfDeath", timeOfDeath);
		info.AddValue("isCaptured", isCaptured);
		info.AddValue("number", number);
		info.AddValue("pokemonName", pokemonName);
		info.AddValue("nickName", nickName);
		info.AddValue("description", description);
		info.AddValue("isFromTrade", isFromTrade);
		info.AddValue("level", level);
		info.AddValue("evolveLevel", evolveLevel);
		info.AddValue("type01", type01);
		info.AddValue("type02", type02);
		info.AddValue("sex", sex);
		info.AddValue("nature", nature);
		info.AddValue("ability01", ability01);
		info.AddValue("ability02", ability02);
		info.AddValue("baseHP", baseHP);
		info.AddValue("baseATK", baseATK);
		info.AddValue("baseDEF", baseDEF);
		info.AddValue("baseSPATK", baseSPATK);
		info.AddValue("baseSPDEF", baseSPDEF);
		info.AddValue("baseSPD", baseSPD);
		info.AddValue("maxHP", maxHP);
		info.AddValue("curMaxHP", curMaxHP);
		info.AddValue("maxATK", maxATK);
		info.AddValue("maxDEF", maxDEF);
		info.AddValue("maxSPATK", maxSPATK);
		info.AddValue("maxSPDEF", maxSPDEF);
		info.AddValue("maxSPD", maxSPD);
		info.AddValue("curHP", curHP);
		info.AddValue("curATK", curATK);
		info.AddValue("atkStage", atkStage);
		info.AddValue("curDEF", curDEF);
		info.AddValue("defStage", defStage);
		info.AddValue("curSPATK", curSPATK);
		info.AddValue("spatkStage", spatkStage);
		info.AddValue("curSPDEF", curSPDEF);
		info.AddValue("spdefStage", spdefStage);
		info.AddValue("curSPD", curSPD);
		info.AddValue("spdStage", spdStage);
		info.AddValue("evasion", evasion);
		info.AddValue("evasionStage", evasionStage);
		info.AddValue("accuracy", accuracy);
		info.AddValue("accuracyStage", accuracyStage);
		info.AddValue("hpEV", hpEV);
		info.AddValue("atkEV", atkEV);
		info.AddValue("defEV", defEV);
		info.AddValue("spatkEV", spatkEV);
		info.AddValue("spdefEV", spdefEV);
		info.AddValue("spdEV", spdEV);
		info.AddValue("hpIV", hpIV);
		info.AddValue("atkIV", atkIV);
		info.AddValue("defIV", defIV);
		info.AddValue("spatkIV", spatkIV);
		info.AddValue("spdefIV", spdefIV);
		info.AddValue("spdIV", spdIV);
		info.AddValue("baseEXPYield", baseEXPYield);
		info.AddValue("levelingRate", levelingRate);
		info.AddValue("lastRequiredXP", lastRequiredXP);
		info.AddValue("currentXP", currentXP);
		info.AddValue("nextRequiredXP", nextRequiredXP);
		info.AddValue("hpEVYield", hpEVYield);
		info.AddValue("atkEVYield", atkEVYield);
		info.AddValue("defEVYield", defEVYield);
		info.AddValue("spatkEVYield", spatkEVYield);
		info.AddValue("spdefEVYield", spdefEVYield);
		info.AddValue("spdEVYield", spdEVYield);
		info.AddValue("baseFriendship", baseFriendship);
		info.AddValue("catchRate", catchRate);
		info.AddValue("statusCondition", statusCondition);
		info.AddValue("badlyPoisonedTurnCounter", badlyPoisonedTurnCounter);
		info.AddValue("sleepTurns", sleepTurns);
		info.AddValue("confusion", confusion);
		info.AddValue("confusionTurns", confusionTurns);
		info.AddValue("curse", curse);
		info.AddValue("embargo", embargo);
		info.AddValue("embargoTurns", embargoTurns);
		info.AddValue("encore", encore);
		info.AddValue("encoreTurns", encoreTurns);
		info.AddValue("flinch", flinch);
		info.AddValue("healBlock", healBlock);
		info.AddValue("healBlockTurns", healBlockTurns);
		info.AddValue("identification", identification);
		info.AddValue("infatuation", infatuation);
		info.AddValue("nightmare", nightmare);
		info.AddValue("partiallyTrapped", partiallyTrapped);
		info.AddValue("partiallyTrappedTurns", partiallyTrappedTurns);
		info.AddValue("perishSong", perishSong);
		info.AddValue("perishSongTurnCountDown", perishSongTurnCountDown);
		info.AddValue("seeding", seeding);
		info.AddValue("taunt", taunt);
		info.AddValue("tauntTurns", tauntTurns);
		info.AddValue("telekineticLevitation", telekineticLevitation);
		info.AddValue("telekineticLevitationTurns", telekineticLevitationTurns);
		info.AddValue("torment", torment);
		info.AddValue("trapped", trapped);
		info.AddValue("aquaRing", aquaRing);
		info.AddValue("bracing", bracing);
		info.AddValue("centerOfAttention", centerOfAttention);
		info.AddValue("defenseCurl", defenseCurl);
		info.AddValue("glowing", glowing);
		info.AddValue("rooting", rooting);
		info.AddValue("magicCoat", magicCoat);
		info.AddValue("magneticLevitation", magneticLevitation);
		info.AddValue("magneticLevitationTurns", magneticLevitationTurns);
		info.AddValue("minimize", minimize);
		info.AddValue("protection", protection);
		info.AddValue("recharging", recharging);
		info.AddValue("semiInvulnerable", semiInvulnerable);
		info.AddValue("substitute", substitute);
		info.AddValue("substituteHP", substituteHP);
		info.AddValue("takingAim", takingAim);
		info.AddValue("takingInSunlight", takingInSunlight);
		info.AddValue("withdrawing", withdrawing);
		info.AddValue("whippingUpAWhirlwind", whippingUpAWhirlwind);
		info.AddValue("movesToLearn", movesToLearn);
		info.AddValue("pokemonsMoves", pokemonsMoves);
		info.AddValue("lastMoveUsed", lastMoveUsed);
		info.AddValue("equippedItem", equippedItem);
		info.AddValue("isInBattle", isInBattle);
		info.AddValue("origin", origin);
		info.AddValue("genderRatio", genderRatio);
		info.AddValue("isShiny", isShiny);
	}
}
